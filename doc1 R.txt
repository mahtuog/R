**********************************************************************************
TERMINOLOGY IN "R"

Variables in R are known by the name OBJECTS

every object has 2 properties (mode and length)

mode tells what kind of object is that (numeric, character, logical and complex)

Note : The mode complex here is complex numbers and not vector or list types


a = 12

class(a) 

class command is used to find out what is the data type of the variable "a"


To explictly typecast the variable

as.intiger(a) -> b

We are converting the variable "a" of type intiger and then storing it into another variable "b"

OR

as.intiger(10)->a

All the numbers are grouped into a single class called "numeric" the integer, double etc are all a single data type called numeric


q)What is the difference between class "numeric" and class "integer"                  

A)Numeric type is the root class (base class) which included integers and decimal numbers under its family, basically its used to represent numbers. 


q)Explictly storing a variable as type integer

as.integer(20) -> b
class(b)            This would print that the class of variable b is of type "integer"

OR

b = as.integer(20)

Let’s write a simple program to add 2 number (where one number is an integer and other is a decimal value)

a=10
b=12.5
c=a+b
Now to see the value of c, just type c and press enter key ! Also observe the class of c 

Note: All the float/double variables belong to the category of numberic 

c = as.double(11.11)
class(c)  //this would still show up as numeric, even if we have explictly type casted 
=============================================================

BOOLEAN data types (also called as logical datatypes in PIG) TRUE/FALSE always has to be in capital !

a= TRUE   #Anything which begins with a # symbol is comment, it wont be executed
class(a)




--------------------------------------------------------------------------
VECTORS 

q) What is a vector  ?
A vector can include any kind of data object !

Note : Vector elements are stored in contigous memory locations 



q)How to create a vector ?
a = c("Hello", "World" , 1, 2, 3)

q) How to find the length of  vector "a" ?
A) lenght(a)

Length would typically give the number of objects in the vector


q)Creating an integer  vector 

myvec = c(1,2,3,4)
class(myvec)
myvec = c(1L,2L,3L,4L)

Note :L denotes long integer


q)How to find out how much memory if a vector occupies 
A)
a=1000
object.size(a)

q)Vector elements are flat , no matter how we create them
myvec = c(1,2,3,c("red","blue"))
 



q)Adding or appending values to a vector 
append(a,"Hi")

The above statement will display "Hi" appended along with the original 
contents of vector (a) However the reality is, try to print the contents of vector(a) once again and you will find the last appended value missing. 


a=append(a,"Hi")


q)Creating an empty vector and adding elements into it 
emptyvec = c()
emptyvec[2]=200

q)How to access the vector locations b =using index operators ?
A)a[2]

q)How to access the location items within a range ?
A) a[2:5]


q)Accessing multiple elements from the vector a, supose I want to access the vector elements 1,2,3
A)

a = c(11,21,31,41,51,61,71,81,91)

b=c(2,4,6)



I can now access the elements of vector a[1,2,3] using the below command
a[b]

Note : Directly using the above syntax ( a[1,2,3] ) will throw an error ! 


q)Creating a character or a string vector 

mystr = c("b","bc","acdf")

Some of the operations you can do on vectors 

lenght(mystr)

nchar(mystr) 
The above command will give the lenght of each object in the vector 

q)Check how the nchar function works on a mixed vector like vector a in the previous question 

myvec  = c("Hello",12.23)
nchar(myvec)


q)Some more interesting operations on a string vector 
mystr = c("b","bc","acdf")
mystr=="a"


OR

mystr == 'a'

The above operation will check if there is any object (a) the vector mystr, the output will be a logical vector, we do not have any object (a) in the above vector, instead we have (b,bc,bcd,acdf) hence the o/p would be False,False,False,False   


Our vector (a) and vector (mystr) consists of 
a = c("Hello", "World" , 1, 2, 3)
mystr =c("b","bc","acdf")  
b = c(1,2,3)


Q)Let's try to find out the class of the vector mystr and vector (a)

class(mystr)
class(a)



-----More functions on vectors------ 

is.logical(a)
is.numeric(a)
is.numeric(b)
is.character(a)
is.integer(b)


WORKSPACE
==========
Q)What is a workspace ?
A)Its actually a folder where all the work done in the r console would get saved 

Q)How to remove any variables from the workspace ?
A)
a=2
b=3
c=a+b
d=13

rm(b)
ls()


The rm command would have removed the variable b from the workspace. The ls() command can list the active variables in the workspace.



Q)How to remove all the elements from the workspace ?
A)
rm = (list = ls())

Now again use the ls() command to list all the variables in the current session


Q) How to know which directory are we working in ?
A) getwd()

Q) How to set the working directory ?
A) setwd("/user/hduser/myR")

Note: Ensure that you have created a folder by name myR in your HOME directory in Ubuntu.


Q) How to create a vector with sequence of elements ?

a= 1:10

The above vector would contain vector elements starting from 1 to 10

Q) Using the sequence function

a = seq(1,10,2)

The last object 2 is the stepping factor, the data would step by a factor of 2

a = 1,3,5,7,9 would now be the contents of vector a



Q) Try to see what would be the o/p of the below command and list list the contents of vector a

a = seq(20,1,-0.5)

The o/p would start from 20, and go on as 19.5, 19, 18.5 until 0.5

Q)Try this ..
a=seq(20,1,0.5)


Q) What does this do  ?
a = seq (10, by = 2, 20)

Q)Appending the contents of muliple vectors to a single vector
z= c(a,b,c)

Where a, b and c are already vectors with data

Q)Understanding the repeat function "rep"
A) rep(5,10)

The above function will simply repeat 5, 10 times

rep(1:4, 10)

The above command will  print
1234 1234 1234 (ten times)

rep(1:4, each = 3)

111 222 333 444

rep(1:4, each = 3, times = 2 )

111 222 333 444 111 222 333 444

Try the following and try to understand what it does
rep(1:5, 2)

1 2 3 4 5 1 2 3 4 5


 
Q)How to generate 10 random numbers ?
runif(10)

a=runif(10)

Run the same command and you will see the vector (a) having different values

runif means random uniform

The vector "a" would now have 10 random numbers !

...Try this now ...

a = runif(10,min=50,max=60)

q)What is the names() function do to a vector ?
A)It would assign names to the elements of vector

Suppose my vector (a) has 3 elements (1,2,3)

names(a)=c("small","medium","large")

Try printing the contents of vector (a) and its self explanatory


Another example 
----------------------

num = c(1:3)

a=c(“one”, “two” , “three”)

names(num)=a

>num
One two three
1        2     3 


Q)How to replace an item in a vector
a=1:10

This would fill vector a with 10 numbers (1 to 10)

a[3]=NA

NA means a missing element (not available)

In a real world scenario, we would come acorss vectors with missing values, to identify them we the below function

!is.na(a)

Also try

is.na(a)

A new logical vector would be created with values such as TRUE/FALSE where TRUE would be representing missing values.

Try this ..
b=na.omit(a)

The above command would omit the NA values from the vector "a"

a=c(1:10)

b=a[-c(5)]
Vector b would contain all the elements from vector (a) except the 
5th element from vector (a) , it does not replace it with NA but just remove it from the vector.

Try this out ...

max(a)
min(a)
median(a)

q)Suppose I have a vector a=c(1:10), how to find out which of these elements in a is greater than 5 ?
A) a[(a>5)]

The above command would produce a list of vectors 


q) Try This
a>5

would result in generation of a logical vector with TRUE, FALSE .. (try it and see the o/p

q) How to find out the min or max element in a vector
a=c(1:10)
b=min(a)
b=max(a)


q)
a=1:5
which.min(a)    This will print the position of the minimum element in the vector "a"

which.max(a)

Creater a vector and check the class of the vector

a = c(1:10)

By default its an integer vector

NOW we need to convert it into a numeric vector type

x=as.numeric(a)

OR

as.numeric(a)

Now check the class of vector x and vector a

Now convert the vector into a character vector and see the output

a=as.character(a)

Check the contents of the vector (a) all the elements will be enclosed within double quotes.

Q)What will happen if a vector contains mixed data types ?

a = c(1, "hello")

class(a)
[1] "character"

a
"1" "hello"

So the vector elements are automatically typcasted ! This is known as 
co-ersion in R


Q)TRY this in R editor to have  a number and a LOGICAL data type inside a vector
A)

a=c(TRUE, 10)

class(a)
[1] Numeric

a

1 10
Note : TRUE is replaced by 1 and the number 10 remains as it is !


Q)Try the following data types inside the vector

 x=(TRUE, "a")

The resulting vector "x" will now become a character vector and its contents will be

"TRUE" "a"


ORDER OF PRECEDENCE (in decreasing order with character being the highest)

character, numeric, integer and logical


----------------------More of set operations-------------------------
a = 1:10
b = 5:10
union(a,b) ->c 

Union will merge 2 vectors into a single vector but the elements will not be repeated. 

Intersect(a,b) ->d 

Intersection will bring only the common elements of a & b into a new vector 


q) The any command 
a = 2
b=c(3,4,5)
c = 1:4
any(c>b)

any command will check if there is any element in vector b, which is greater than any of the elements in vector b and return a TRUE or FALSE 





------------------LISTS----------------
suppose we have  3 vectors  v1, v2 and v3

v1 =c("true","false");
v2= 1:5
v3 = c("cat","dog")

my_list=list(vl,v2,v3)

Now the my_list object is a collection of 3 different vectors !

my_list is a collection of type list and it can hold any kind of simple or complex datatypes. 

my_lists[1] will o/p the following

[[1]]
true false

my_lists[[1]] will o/p the following
true false

 

Q) How to access the first element of the second object in the list.
my_list=list(vl,v2,v3)


Note: v1 , v2 and v3 are all the individual objects in the list
my_list[[1]][1]


q)How to find the lenght of the list ?
A)  length(my_list)


q)How to unlist the list elements ?

  a=(1,2,3)
  b=("a","b","c")

mylist = list(a,b)

unlist(mylist)[4]

The above command will directly print "a" i.e the mylist is temporarily converted to a flat vector, only while executing the command.

Newlist = unlist(mylist)

Newlist[4]

This will print "a" directly !

Newlist is now a vector which is a result of flattening out the original list : "mylist"


q)Naming the list elements 
v1 =c("true","false");
v2= 1:5
v3 = c("cat","dog")
my_list=list(v1,v2,v3)
mynames = c("A","B","C")

names(my_list) = mynames

q)Now check the contents of my_list
print(my_list$A)

my_list["B"]






q)Merging 2 lists 
l1 <- list(10,20,30,40)
l2 <- list("Sun","Mon","Tue","Wed")

merg_list <- c(l1,l2)

print(merg_list)



-------Set properties and operations--------------
q)Suppose we have 2 vectors

a = c(1:6)
b = c(5:10)

is.element(1,a)
OR the above command can also be executed using the below syntax
1 %is% a

The above 2 commands are ways of finding out if a particular element is in a vector !

is.element(a,b)

will check if every element in a is present in every element in b and result in producing a logical vector

q)Check is the is.element function works only on vectors or even on a list. 


a = 1:10
b = 5:10
union(a,b) ->c 

Union will merge 2 vectors into a single vector but the elements will not be repeated. 

Intersect(a,b) ->d 

Intersection will bring only the common elements of a & b into a new vector 


q) The any command 
a = 2
b=c(3,4,5)
c = 1:4
any(c>b)

any command will check if there is any element in vector b, which is greater than any of the elements in vector b and return a TRUE or FALSE 


**************Picking random samples from a vector***********************
a=c(1:10)

sample(a)

This function would pick the random sample from the vector "a"

The random sample will pick all the elements from "a" but each time the ordering will be different.

To ensure the ordering of the element is same every time we use this command

sample(a)
set.seed(100)
sample(a)

Now, during both occasions, the sample() function will produce the sampling from "a" in the same order


set.seed(100) can be any number , instead of 100, we can use any number ! However if we want the ordering to be same, we have to use the same seed value

i.e

sample(a)
set.seed(100)
sample(a)

The above 2 sampling will produce same sample ordering

set.seed(50)
sample(a)

This will produce a different sampling ordering of elements !


Q) Suppose the original vector has 5 elements and we need a sample of size 10 elements to be picked , how to do that ?

a=c(1:5)
b=sample(a,10,replace=T)

replace = T means, the resultant vector can have repeated elements in the sample.

q)How to sort the elements in a vector "b" in descending order ?
A)c = sort(b, descending=TRUE)

OR

c=rev(sort(b))

b=c(-1,100,2)
order(b) 

Ordering will give the position of the elements in ascending order. The elements of the vector will not be printed. 


=====================Data frames part 1 ==========================

Q)What is a data frame ?
A)When we import a csv file into R, it gets stored as a data frame. Basically dataframes can be seen a collection of vectors, arranged in 
rows and colunms

Note: All rows must have same number of columns or all vectors must be of same size

Q)How to create a data frame without using a CSV file ?
A)We have to manually load the data into individual vectors and then pass them as arguments to the data.frame function 

 a =1:5
 b= 5:10
 c=11:16
 data.frame(a,b,c) -> df

print(df)

q)Checking the structure of data frame 
str(df) 
The str command allows you to check the structure of data frame 

q)The summary function in data frames to provide the summary of the data
i.e Summary statistics (mean, median, min, max etc)
summary(df) 


q)Accessign the data from the data frame 
A)The data frame which was created (df) is composed of 3 vectors(a,b,c) which are 3 columns of the data frame 

print(df$a) 
The above command would print the first coloumn from the data frame 

print(df$a,df$b) 
The above commmand would print the first 2 columns from the data frame

q)How to exract the rows from a data frame?
A) 

row1 = df[1,]
print(row1)


row1to2 = df[1:2,]
print(row1to2)

The above is to extract the first 2 rows from the data frame 


q)How to access the first and first row from the df data frame which we have created ?

row1and5 = df[c(1,5),]
 
The above statement would print all the elements of row 1 and 5

q)To pick only the 3rd coloumn elements of row 1 and 5 

row15andcol3 = df[c(1,5),3]



Q) stack command in data frames 
singvec = stack(df) 

The stack command will stack all the vectors in a data frame into a single column 

q)Try the unstack command explore it for yourself ! 
unstack(df)

----------------Adding more rows and columns to a data frame--------------

Q)The cbinf() is used to add more colunms to an existing data frame  
d = 100:104
df=cbind(df,d)
print(df) 


Q)Adding rows to an existing data frame using the rbind() 
row6 = 1000:1003
df=rbind(df,row6)


Q)How to view a very large data frame which does not fit into the R console ?

fix(name of the data frame) 

The fix command will present the contents of the data frame in a seperate EXCEL style window



q)Obtaining the transpose( interchange of rows and colunms) of a data frame eg

12 		     13	
34   --transpose-->  24


t() function is used to obtain the transpose of a data frame 

Syntax : t(name of the data frame)

Suppose we store the result of a transposed data frame into a new object in R and check the class of that object, it would be a matrix instead of data frame. 

We need to use as.data.frame(object name) to convert it back to data frame


-------------------More on data access from data frames---------------

Q)Accessing the elemets of the data frame 

Suppose we have a data frame with 20 rows, using the head command we can see just the first 6 rows of the data frame 

Head(name of the data frame) 

By default, the head command will display only the first 6 rows in a data frame. 

Head(df, 20) will display first 20 rows of the data frame, where bdf is the name of the data frame. 

Head(df,1) will display the first row of the data frame named "df"

Q)How to view the last rows of a data frame ?

A)	Using the tail command 
tail(df) 

tail function works exactly like the head function but from bottom up
Note: df is the name of the data frame

Q)Omitting the missing values in a data frame (NA) 

na.omit(name of the data frame)

Let's see an example 
v1 = 1:5
v1[3]=NA
v2=6:10
v3=11:15
v3[4]=NA 

mydf = data.frame(v1,v2,v3)
print(mydf)

na.omit(mydf)

Note: The entire row which contains NA will be ignored ! 
 
Q)Using the which command on a data frame

Suppose I have a data frame with 20 rows and 6 columns and I want all the elements from all the rows of but just first column which is greater than 1 

df[which(df[,1] > 1),]

q)Using & operator in the which funciton above 

bdf[which(  bdf[ ,1] > 1 & bdf[,2] < 7  ),]

the second condtion after the & (AND) operator means, I need the rows of second coloumn which is less than 7, now both conditions in the which function must be met in order to produce the output. 

Q)Suppose I want to see all the numbers greater than 4 in the first column for all rows

bdf[which(bdf[,1] > 4), 1)


Understanding the above command

---argument1---
which(bdf[,1]>4) will try to fetch all the rows from first column ?  ---

---argument2--- (,1)
in the above command is to pick the data only from the first column 





--------------------------SUBSETTING-----------------------------------
The subset function allows us to selectively pick the data from an R object 

q)Using the subset function on a vector 

a = 1:20
b = subset(a,a>10) 
print(b)

The subset function has picked only those elements from vector "a" whose 
elements are greater than 10 

The subset function can also contain logical expressions 

b = subset(a,a<10 & a< 15)






q)Using the subset function on a data frame

Note : This link would explain the data set 
http://stat.ethz.ch/R-manual/R-devel/library/datasets/html/USArrests.html



USArrests is a built in data set in R studio(Its a data frame)  
>USArrests 

                 Murder Assault UrbanPop Rape
Alabama          13.2     236       58  21.2
Alaska           10.0     263       48  44.5
Arizona           8.1     294       80 	31.0
Arkansas          8.8     190       50 	19.5
California        9.0     276       91 	40.6
Colorado          7.9     204       78 	38.7
Connecticut       3.3     110       77 	11.1
Delaware          5.9     238       72 	15.8
Florida          15.4     335       80 	31.9
Georgia          17.4     211       60 	25.8
Hawaii            5.3      46       83 	20.2
Idaho             2.6     120       54  14.2
Illinois         10.4     249       83 	24.0
Indiana           7.2     113       65 	21.0
Iowa              2.2      56       57 	11.3
Kansas            6.0     115       66 	18.0
Kentucky          9.7     109       52	 16.3
Louisiana         15.4     249      66 	22.2
Maine              2.1      83      51  7.8
Maryland         11.3     300       67 	27.8
Massachusetts     4.4     149       85 	16.3
Michigan         12.1     255       74 	35.1
Minnesota         2.7      72       66 	14.9
Mississippi      16.1     259       44	 17.1
Missouri          9.0     178       70	 28.2
Montana           6.0     109       53 	16.4
Nebraska          4.3     102       62 	16.5
Nevada           12.2     252       81 	46.0
New Hampshire    2.1      57       56	  9.5

q)Lets pick up all t	he columns based on the condition that the population is greater than 70 million (3rd column)

newarrests = subset(USArrests,UrbanPop >= 70 , select = c(Murder,Assault,UrbanPop,Rape))


print(newarrests)


q)Another example on subsetting a data frame 

newarrests = subset(USArrests, UrbanPop >=70 & Assault >= 200, select=c(UrbanPop,Assault))


q)Lets order the newarrests data frame by the population 
sorted = newarrests[order(newArrests$UrbanPop),]
print(sorted)

Note : for descending ordering of the data frame 

sorted = newarrests[order(newArrests$UrbanPop, decreasing = TRUE),]
print(sorted)


========================================================================
Browsing the packages in R 
-------------------------------

q)Use the library() function, this will list the path of the packages available and also the number of preloaded packages. 

q)Loading a new package into R library
install.packages("dplyr")

The above statement will install the "slidify" package from the CRAN repository. 
Note: An active internet connection is necessary. 
=======================================================================


=======================FILE IO operations============================
Read and write from files (most commonly used files is the CSV)


read.csv("Name of the file") -> a
OR
a = read.csv("File path")


the object [a] will be a dataframe 

q)Print the contents of "a" and check the data type of object a 
It will be a data frame and the first row from the file will be missing 
since it will considered as header, to include this we need to set the header option during import.  

a = read.csv("file path", header=F,stringsAsFactors=FALSE)

Note:header=F means, the first line of the file will be considered as data



q)Writing an object’s data in R into a file 
Suppose we have an object "b" in R console (a is of type data frame)

b = 1:10

write.csv(b,"filename.csv")

Note: .csv is a must in the file name argument ! 


Row names will be added by default in the file being written. using the write.csv command. The row names will be numbers starting from 1 

We can turn off this default naming of rows by the following command 

write.csv(a,"filename.csv" , row.names = F)

q)How to ignore the column names in a csv file created through R ?

write.csv(a,"filename.csv",row.names=F,col.names=F)
Note: However , you might not be able to ignore the column names at times

----There is a workaround for doing this----
write.table(a, file="path", row.names=FALSE, col.names=FALSE, sep=",")

Note: Write.table will write the contents of data frame "a" into a file without any row or column names. 

q)Writing a data frame with row and column names into a CSV file 

a = 1:3
b = c("Ram","Sham","Bob")
c = c("a","b","c")
df = data.frame(a,b,c)
rownames(df)=c("r1","r2","r3")
colnames(df)=c("c1","c2","c3")

write.csv(df,"path")
Note: The rownames and column names would be added from the data frame as it is. 


---------------Something interesting------------------------
q)Ignoring some lines from a CSV file while importing it 
Note: There is no direct way but this is a workaround and can be quite 
handy at times ! 

---Write the contents of USArrests (dataframe) into a text file 
write.csv(USArrests,"file path")

q)How to read only the header from a csv file ?
header = read.csv(filepath, skip = 1, header = F, nrows = 1, as.is = T) 


q)How to skip the first 3 lines from the csv file while reading it ?
mydf = read.csv(file, skip = 3, header = F)

Compare the output by running the below 2 commands 

head(USArrests)
head(mydf)

Note: Head function prints only the first 6 lines from the dataframe. 


------------IMPORTING TEXT FILES----------------

Suppose I have a sample file like sample.txt

Hello how are you 
I am fine 

read.table("name of the file.txt", fill = T, header = F) -> b 

Now in the above input file, the first line has 4 elements (4 columns) and second line has 3 elements, fill=T will take care of this by filling in blanks spaces in the missing fields 

header = F will ensure that the first line from the input file is not considered as HEADER but as a data field 

The object [b] will be a data frame ! 


read.table("name of the file" , sep ="\t") -> c 

here the sep = "\t" means the input file is a TAB delimited file ! 

q)Playing around with tab delimited file, copy the below contents into a 
text file and save it in LINUX 


Note : Check the class of "c" and it will be a data frame




----------------Importing XML files------------------
The following is a simple XML file 

<EMPLOYEE>
      <ID>13</ID>
      <NAME>Morris</NAME>
      <SALARY>911</SALARY>
      <STARTDATE>11/15/2014</STARTDATE>
      <DEPT>IT</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>14</ID>
      <NAME>Bob</NAME>
      <SALARY>112</SALARY>
      <STARTDATE>5/11/2011</STARTDATE>
      <DEPT>HR</DEPT>
   </EMPLOYEE>

q)Load the required libraries 
library(XML)
library(methods)
mydf = xmlToDataFrame("file path")

Note: The XML package must be installed in R before we try this out! 
However its installed for you in the VM provided. 











